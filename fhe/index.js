const express = require('express')
const cors = require('cors')

const app = express()
const paillierBigint = require('paillier-bigint')

const viem = require("viem")

app.use(cors())

app.use(express.json())

const PORT = process.env.PORT || 8000
const publicKey = new paillierBigint.PublicKey(5577819094047850710405163442039263680736871616058742587878776729393912670803065881313534116778584695201176502813843865204307109996618506435301299331225150733150024229510722384264543359568586389513397074813304961067328101908544768782128097224994007437940266810759398518699683870849495819896192445699182906294068757841719472540472976997913965824575150729290593574079835445431388115979803318696167362604401856463505682759701326919061391614448942307286791516898125291329912021507282752002745687642581060892769017038470366431454976612573017337373492193061563340520118516888471273452947282196730735695951926874669520907468326543865792024389870558625996076088091504499889454477882877713600306415980890624781793474473685208289170839091215958724367710034410426868449640100362598894701405426751321988918422105225247435809463471586495582500709888607888415036440150176473320930313299559189148142580674079762191677150570971588951688443973n, 9129862710706610815159858370402138973055927594309940853249468029791395470948101007332803299885582412183694631163275835005529892534592126879086033097808314406399738090795101920465133473614574273520046737821099482949470984493197234767399397898184792972846283731947701709908173757396582118777643102256110365369418615940202839116438298371091980172163155238283505623986197604239040350722211698927018481357793825362661509375756039005504559208553712236609071526073687000430577389768735062832769840531568285214674911565177168915219308330889397494904339150552150959772476018928229484644713496376475173205858042588981786025840650477130055756512021912768100669900386419526068722204058193837000382488277088699560891637372327642989900062333527101777831638044533767566925807037285704225630182722486418665583356013179070755720556775238578884808489817927302321206807659684980176012768179262853040597037343511359387536228093610196825047534990396348896965931216769205458644423926536693048030599112184653303522943342425672038926878348655199584952489082958250944801239483099399329969151720647439929000017033388140000892201431235677789855813970554322625393922793002345189092287735010994232296896970018006973518041649067334965614704615363300033427995597252026267774042424068440452042636081596964100652119915434386135080417908286795118787338649712438490785003116147814207815737738331047732319255705654854792414445136410976665613817747777957997867434845426791366880354078713171600204173399563022905103774243216987947976273087014089076046097576228231000414865796522897623902052679710293829578032206079143520433554877140993205263288268922841311718575604615904388450504660732721170358001997709577160095069844876791544881007820972450302934747211699742098660225696936207664733882658031098493330449850315671176783449016251739296947598322905593033515920888788433598068121473741857n)
const privateKey = new paillierBigint.PrivateKey(2788909547023925355202581721019631840368435808029371293939388364696956335401532940656767058389292347600588251406921932602153554998309253217650649665612575366575012114755361192132271679784293194756698537406652480533664050954272384391064048612497003718970133405379699259349841935424747909948096222849591453147034378920859736270236488498956982912287575364645296787039917722715694057989901659348083681302200928231752841379850663459530695807224471153643395758449062643126194973898863457628372446883216707367601109045682018965616260322836022716497901600358869262315107533067425593560400505113872839105407900324282375387681597015715902413944661216352953192963830834463939335861019583904240329294284144963622598578761158651015788222268025316876721286698009034865422202278684141828344001672577801318462537703903202593735013718895756546660789997137881876753574164055269565027565941189346234879743525797575979081188025200471786322727110n, 81817697381076522151304837685715311946622730106255862556245274085089771324205220256414638712901168402433012157105186261112607891017228222126614461150105977126345600819132733682607117424783280395049643958239932564106463296993656497646306580514079264033993996956190251506600326246450888842886258101474925979664349904419474104393214072486681137226764552843089355122803898488801753256988530189520729535672112886061559145107491634184807292389840567389719581734016735827612733986185639398104084392639648544592843658486676129387455171451456482191073632676810525166132685671390372747367922754769125431904368285262544082327946176889988941327888178942837795099378168510486375476069327149966661638068057210177041440218680633709451678386875884482120665804920700137494601861120694721228207993862961533387155217385527888635342039726920509181815941035588935019252734041387827896328564206215441680649895309760320167830361286529959635861398n, publicKey)

//@params: enc_ul: [2] [long,lat] encrypted user location, area_ramge: [4] [0,1]: long range [2,3]: lat range
function in_permitted_location(enc_ul, area_range){
 
  enc_ul.reduce((accum, digit) => (accum * 10n) + BigInt(digit), 0n);
  const dec_ul_lon = privateKey.decrypt(BigInt(enc_ul[0]));
  const dec_ul_lat = privateKey.decrypt(BigInt(enc_ul[1]));
  if(dec_ul_lon>=area_range[0] && dec_ul_lon<= area_range[1] && dec_ul_lat>=area_range[2] && dec_ul_lat<=area_range[3]){
    return true
  }
  else{
    return false
  }
}
app.listen(PORT, async () => {
  console.log('Listening at PORT: ', PORT)
})

app.post('/fhe_check',(req,res)=>{
    try {
        const enc_userLoc = req.body.enc_ul;
        
    } catch (error) {
        console.log(error);
    }
})
