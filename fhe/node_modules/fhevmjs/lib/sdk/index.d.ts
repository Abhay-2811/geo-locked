import { EIP712 } from './token';
export type FhevmInstance = {
    encrypt8: (value: number) => Uint8Array;
    encrypt16: (value: number) => Uint8Array;
    encrypt32: (value: number) => Uint8Array;
    generateToken: (options: {
        verifyingContract: string;
        name?: string;
        version?: string;
        force?: boolean;
    }) => {
        publicKey: Uint8Array;
        token: EIP712;
    };
    setTokenSignature: (contractAddress: string, signature: string) => void;
    getTokenSignature: (contractAddress: string) => {
        publicKey: Uint8Array;
        signature: string;
    } | null;
    hasKeypair: (contractAddress: string) => boolean;
    decrypt: (contractAddress: string, ciphertext: string) => number;
    serializeKeypairs: () => ExportedContractKeypairs;
};
export type TokenSignature = {
    publicKey: Uint8Array;
    signature: string;
};
export type ExportedContractKeypairs = {
    [key: string]: {
        publicKey: string;
        privateKey: string;
        signature?: string | null;
    };
};
export type FhevmInstanceParams = {
    chainId: number;
    publicKey: string;
    keypairs?: ExportedContractKeypairs;
};
export declare const createInstance: (params: FhevmInstanceParams) => Promise<FhevmInstance>;
